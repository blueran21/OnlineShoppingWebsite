version: '3.8'

services:
  # ---------- Infra ----------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: ["2181:2181"]

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on: [zookeeper]
    ports:
      - "9092:9092"      # 外部(宿主机)连
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # ★ 双监听：对外9092、容器内29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  cassandra1:
    image: cassandra:4.1
    environment:
      CASSANDRA_CLUSTER_NAME: orders_cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_SEEDS: cassandra1
    ports: ["9042:9042"]
    volumes:
      - cassandra1_data:/var/lib/cassandra
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'SELECT release_version FROM system.local' localhost 9042 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s

  # initialize Cassandra schema (only work for the first time)
  cassandra-init:
    image: cassandra:4.1
    depends_on:
      cassandra1:
        condition: service_healthy
    restart: on-failure
    entrypoint: [ "/bin/sh","/init/init.sh" ]
    volumes:
      - ./cassandra/init.cql:/init/init.cql:ro
      - ./cassandra/init.sh:/init/init.sh:ro


  payment-mock:
    image: wiremock/wiremock:3.6.0
    ports: ["8083:8080"]     # 宿主 8083 -> 容器 8080
    command:
      - "--verbose"
      - "--enable-stub-cors"
      - "--global-response-templating"
    volumes:
      - ./wiremock:/home/wiremock

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysqlroot
      MYSQL_DATABASE: accounts_db
    ports: ["3307:3306"]     # 宿主3307
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_0900_ai_ci
    volumes:
      - accounts_mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -pmysqlroot || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  mongodb:
    image: mongo:7
    # ★ 你要的改动：已经是 27018:27017（宿主27018 -> 容器27017）
    ports: ["27018:27017"]
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' | grep 1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s

  # ---------- Apps ----------
  account-service:
    build:
      context: .
      dockerfile: account-service/Dockerfile
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: 3c1a6f85d7b24b7e9f0a2c5d8fe4b3a76c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f
      JWT_ISSUER: oss-demo
    ports: ["8084:8084"]

  item-service:
    build:
      context: .
      dockerfile: item-service/Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports: ["8081:8081"]

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    depends_on:
      cassandra1:
        condition: service_healthy
      cassandra-init:
        condition: service_completed_successfully
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: 3c1a6f85d7b24b7e9f0a2c5d8fe4b3a76c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f   # ← 和 account 一致
      JWT_ISSUER: oss-demo
    ports: ["8082:8082"]

volumes:
  cassandra1_data:
  accounts_mysql_data:
  mongo_data:
